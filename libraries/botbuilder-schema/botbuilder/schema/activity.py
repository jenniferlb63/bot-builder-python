# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Activity(Model):
    """An Activity is the basic communication type for the Bot Framework 3.0
    protocol.

    :param type: Contains the activity type. Possible values include:
     'message', 'contactRelationUpdate', 'conversationUpdate', 'typing',
     'endOfConversation', 'event', 'invoke', 'deleteUserData', 'messageUpdate',
     'messageDelete', 'installationUpdate', 'messageReaction', 'suggestion',
     'trace', 'handoff'
    :type type: str or ~botframework.connector.models.ActivityTypes
    :param id: Contains an ID that uniquely identifies the activity on the
     channel.
    :type id: str
    :param timestamp: Contains the date and time that the message was sent, in
     UTC, expressed in ISO-8601 format.
    :type timestamp: datetime
    :param local_timestamp: Contains the date and time that the message was
     sent, in local time, expressed in ISO-8601 format.
     For example, 2016-09-23T13:07:49.4714686-07:00.
    :type local_timestamp: datetime
    :param local_timezone: Contains the name of the timezone in which the
     message, in local time, expressed in IANA Time Zone database format.
     For example, America/Los_Angeles.
    :type local_timezone: str
    :param service_url: Contains the URL that specifies the channel's service
     endpoint. Set by the channel.
    :type service_url: str
    :param channel_id: Contains an ID that uniquely identifies the channel.
     Set by the channel.
    :type channel_id: str
    :param from_property: Identifies the sender of the message.
    :type from_property: ~botframework.connector.models.ChannelAccount
    :param conversation: Identifies the conversation to which the activity
     belongs.
    :type conversation: ~botframework.connector.models.ConversationAccount
    :param recipient: Identifies the recipient of the message.
    :type recipient: ~botframework.connector.models.ChannelAccount
    :param text_format: Format of text fields Default:markdown. Possible
     values include: 'markdown', 'plain', 'xml'
    :type text_format: str or ~botframework.connector.models.TextFormatTypes
    :param attachment_layout: The layout hint for multiple attachments.
     Default: list. Possible values include: 'list', 'carousel'
    :type attachment_layout: str or
     ~botframework.connector.models.AttachmentLayoutTypes
    :param members_added: The collection of members added to the conversation.
    :type members_added: list[~botframework.connector.models.ChannelAccount]
    :param members_removed: The collection of members removed from the
     conversation.
    :type members_removed: list[~botframework.connector.models.ChannelAccount]
    :param reactions_added: The collection of reactions added to the
     conversation.
    :type reactions_added:
     list[~botframework.connector.models.MessageReaction]
    :param reactions_removed: The collection of reactions removed from the
     conversation.
    :type reactions_removed:
     list[~botframework.connector.models.MessageReaction]
    :param topic_name: The updated topic name of the conversation.
    :type topic_name: str
    :param history_disclosed: Indicates whether the prior history of the
     channel is disclosed.
    :type history_disclosed: bool
    :param locale: A locale name for the contents of the text field.
     The locale name is a combination of an ISO 639 two- or three-letter
     culture code associated with a language
     and an ISO 3166 two-letter subculture code associated with a country or
     region.
     The locale name can also correspond to a valid BCP-47 language tag.
    :type locale: str
    :param text: The text content of the message.
    :type text: str
    :param speak: The text to speak.
    :type speak: str
    :param input_hint: Indicates whether your bot is accepting,
     expecting, or ignoring user input after the message is delivered to the
     client. Possible values include: 'acceptingInput', 'ignoringInput',
     'expectingInput'
    :type input_hint: str or ~botframework.connector.models.InputHints
    :param summary: The text to display if the channel cannot render cards.
    :type summary: str
    :param suggested_actions: The suggested actions for the activity.
    :type suggested_actions: ~botframework.connector.models.SuggestedActions
    :param attachments: Attachments
    :type attachments: list[~botframework.connector.models.Attachment]
    :param entities: Represents the entities that were mentioned in the
     message.
    :type entities: list[~botframework.connector.models.Entity]
    :param channel_data: Contains channel-specific content.
    :type channel_data: object
    :param action: Indicates whether the recipient of a contactRelationUpdate
     was added or removed from the sender's contact list.
    :type action: str
    :param reply_to_id: Contains the ID of the message to which this message
     is a reply.
    :type reply_to_id: str
    :param label: A descriptive label for the activity.
    :type label: str
    :param value_type: The type of the activity's value object.
    :type value_type: str
    :param value: A value that is associated with the activity.
    :type value: object
    :param name: The name of the operation associated with an invoke or event
     activity.
    :type name: str
    :param relates_to: A reference to another conversation or activity.
    :type relates_to: ~botframework.connector.models.ConversationReference
    :param code: The a code for endOfConversation activities that indicates
     why the conversation ended. Possible values include: 'unknown',
     'completedSuccessfully', 'userCancelled', 'botTimedOut',
     'botIssuedInvalidMessage', 'channelFailed'
    :type code: str or ~botframework.connector.models.EndOfConversationCodes
    :param expiration: The time at which the activity should be considered to
     be "expired" and should not be presented to the recipient.
    :type expiration: datetime
    :param importance: The importance of the activity. Possible values
     include: 'low', 'normal', 'high'
    :type importance: str or ~botframework.connector.models.ActivityImportance
    :param delivery_mode: A delivery hint to signal to the recipient alternate
     delivery paths for the activity.
     The default delivery mode is "default". Possible values include: 'normal',
     'notification'
    :type delivery_mode: str or ~botframework.connector.models.DeliveryModes
    :param listen_for: List of phrases and references that speech and language
     priming systems should listen for
    :type listen_for: list[str]
    :param text_highlights: The collection of text fragments to highlight when
     the activity contains a ReplyToId value.
    :type text_highlights: list[~botframework.connector.models.TextHighlight]
    :param semantic_action: An optional programmatic action accompanying this
     request
    :type semantic_action: ~botframework.connector.models.SemanticAction
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'local_timestamp': {'key': 'localTimestamp', 'type': 'iso-8601'},
        'local_timezone': {'key': 'localTimezone', 'type': 'str'},
        'service_url': {'key': 'serviceUrl', 'type': 'str'},
        'channel_id': {'key': 'channelId', 'type': 'str'},
        'from_property': {'key': 'from', 'type': 'ChannelAccount'},
        'conversation': {'key': 'conversation', 'type': 'ConversationAccount'},
        'recipient': {'key': 'recipient', 'type': 'ChannelAccount'},
        'text_format': {'key': 'textFormat', 'type': 'str'},
        'attachment_layout': {'key': 'attachmentLayout', 'type': 'str'},
        'members_added': {'key': 'membersAdded', 'type': '[ChannelAccount]'},
        'members_removed': {'key': 'membersRemoved', 'type': '[ChannelAccount]'},
        'reactions_added': {'key': 'reactionsAdded', 'type': '[MessageReaction]'},
        'reactions_removed': {'key': 'reactionsRemoved', 'type': '[MessageReaction]'},
        'topic_name': {'key': 'topicName', 'type': 'str'},
        'history_disclosed': {'key': 'historyDisclosed', 'type': 'bool'},
        'locale': {'key': 'locale', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
        'speak': {'key': 'speak', 'type': 'str'},
        'input_hint': {'key': 'inputHint', 'type': 'str'},
        'summary': {'key': 'summary', 'type': 'str'},
        'suggested_actions': {'key': 'suggestedActions', 'type': 'SuggestedActions'},
        'attachments': {'key': 'attachments', 'type': '[Attachment]'},
        'entities': {'key': 'entities', 'type': '[Entity]'},
        'channel_data': {'key': 'channelData', 'type': 'object'},
        'action': {'key': 'action', 'type': 'str'},
        'reply_to_id': {'key': 'replyToId', 'type': 'str'},
        'label': {'key': 'label', 'type': 'str'},
        'value_type': {'key': 'valueType', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
        'name': {'key': 'name', 'type': 'str'},
        'relates_to': {'key': 'relatesTo', 'type': 'ConversationReference'},
        'code': {'key': 'code', 'type': 'str'},
        'expiration': {'key': 'expiration', 'type': 'iso-8601'},
        'importance': {'key': 'importance', 'type': 'str'},
        'delivery_mode': {'key': 'deliveryMode', 'type': 'str'},
        'listen_for': {'key': 'listenFor', 'type': '[str]'},
        'text_highlights': {'key': 'textHighlights', 'type': '[TextHighlight]'},
        'semantic_action': {'key': 'semanticAction', 'type': 'SemanticAction'},
    }

    def __init__(self, **kwargs):
        super(Activity, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.id = kwargs.get('id', None)
        self.timestamp = kwargs.get('timestamp', None)
        self.local_timestamp = kwargs.get('local_timestamp', None)
        self.local_timezone = kwargs.get('local_timezone', None)
        self.service_url = kwargs.get('service_url', None)
        self.channel_id = kwargs.get('channel_id', None)
        self.from_property = kwargs.get('from_property', None)
        self.conversation = kwargs.get('conversation', None)
        self.recipient = kwargs.get('recipient', None)
        self.text_format = kwargs.get('text_format', None)
        self.attachment_layout = kwargs.get('attachment_layout', None)
        self.members_added = kwargs.get('members_added', None)
        self.members_removed = kwargs.get('members_removed', None)
        self.reactions_added = kwargs.get('reactions_added', None)
        self.reactions_removed = kwargs.get('reactions_removed', None)
        self.topic_name = kwargs.get('topic_name', None)
        self.history_disclosed = kwargs.get('history_disclosed', None)
        self.locale = kwargs.get('locale', None)
        self.text = kwargs.get('text', None)
        self.speak = kwargs.get('speak', None)
        self.input_hint = kwargs.get('input_hint', None)
        self.summary = kwargs.get('summary', None)
        self.suggested_actions = kwargs.get('suggested_actions', None)
        self.attachments = kwargs.get('attachments', None)
        self.entities = kwargs.get('entities', None)
        self.channel_data = kwargs.get('channel_data', None)
        self.action = kwargs.get('action', None)
        self.reply_to_id = kwargs.get('reply_to_id', None)
        self.label = kwargs.get('label', None)
        self.value_type = kwargs.get('value_type', None)
        self.value = kwargs.get('value', None)
        self.name = kwargs.get('name', None)
        self.relates_to = kwargs.get('relates_to', None)
        self.code = kwargs.get('code', None)
        self.expiration = kwargs.get('expiration', None)
        self.importance = kwargs.get('importance', None)
        self.delivery_mode = kwargs.get('delivery_mode', None)
        self.listen_for = kwargs.get('listen_for', None)
        self.text_highlights = kwargs.get('text_highlights', None)
        self.semantic_action = kwargs.get('semantic_action', None)
